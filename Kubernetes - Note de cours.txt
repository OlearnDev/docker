-----------------  Kubernetes -----------------  

+- initialization du master

$ kubeadm init-apiserver-advertise-address=192.168.56.101 --node-name $HOSTNAME-pod-network-cidr=10.244.0.0/16

+- creation of the configuration file : utilisé par kubectl

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

............. Mise en place du réseau interne choix de flannel(utilisé pour des tests perso)

+- Ajout pod pour gestion du réseau interne

$sysctl net.bridge.bridge-nf-call-iptables=1	(sur master et node) : Permet à k8s de faire un bridge et gerer iptables

Creation de reseau flannel, lancer les pods
$ kubectl apply - f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml		
				
-+- we check the status of the system pods:

kubectl get pods  -all-namespaces
kubectl get nodes

#si nécessaire

kubectl edit cm -n kube-system kube-flannel-cfg	: Modification du fichier en ligne
---> Modifier la ligne "Network":"10.244.0.0/16"  à "10.10.0.0/16"   : pour dashboard

kubmaster:~# kubectl get nodes

NAME		STATUS	ROLES		AGE		VERSION
kubmaster	Ready	master		7m29s	v1.14.1

+- Sur le node : Permet au node de join le master à travers son token:

kubeadm join 192.168.56.101:6443 --token 5q8bsc.141bc9wjsc026u6 --discovery-token-ca-cert-hash sha256:e0f57e3f3055bfe4330d9e93cbd8de967dde4e4a0963f324d2fe0ccf8427fcfb

kubectl get pods  -all-namespaces   --> s'assurer que tous les nodes sont en running

kubmaster:~# kubectl get nodes

NAME		STATUS	ROLES		AGE		VERSION
kubmaster	Ready	master		9m45s	v1.14.1
kubnode		Ready	<none>		98s		v1.14.1

kubmaster:~# docker ps 		: donne plusieurs clusters issus de k8s au niveau master et bcp moins au niveau du node

NB : Un pod peut être constitué de plusieurs conteneurs

----- Diagnostic avec vagrant : pour aider à regler les soucis reseau avec virtualbox et vagrant

kubmaster:~# kubectl get nodes -o wide 	: Donne des détails sur le reseau configuré

Exple : si les 2 ips sont identiques (master et node), il faudra corriger sinon non joignables 

+-  Modifier /etc/hosts des machines master et les noeuds et ajouter l'ip de la machine en cours reconnue par kubernetes

	Ajouter ip suivi du nom de la machine dans kub sur tous les noeuds
	192.168.99.100 kubmaster

+- puis supprimer les pods flannel

+- ils vont se reconstruire en prenant en compte la modification

kubectl get pods -n kube-system

kubectl delete pods flannel-xxx -n kube-system

Autant de fois que de pods


---------- Kubernetes : autocomplete, alias, accès distant



AutoComplétion 

+- disposer de l'autocomplétion :

prérequis :

apt-get installe bash-completion

mise en place :

echo "source <(kubectl completion bash)" >> ~/.bashrc

$ source .bashrc

...... Alias bashrc

alias k='kubectl'
alias kcc='kubectl config contexte-actuel'
alias kg='kubectl get'
alias kga='kubectl get all --all-namespaces'
alias kgp='kubectl get pods'
alias kgs='kubectl get services'
alias ksgp='kubectl get pods -n kube-system'
alias kuc='kubectl config use-context'


Kubectl à distance

+- access the cluster remotely

#install kubectl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add sudo add-apt-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main" sudo apt-get install kubectl

# create directory 
mkdir ~/.kube

#copy token
ssh user@master "sudo cat /etc/kubernetes/admin.conf" >.kube/config

------- Kubernetes : parallèle avec Docker 

kubectl run myshell -it--image busybox sh    --> On se connecte à un conteneur. Docker utilisé en arrière plan

# hostname
myshell-779886cfcb-rn6fz

# docker ps 		--> sur le node pour voir le conteneur car les pods non systèmes sont visibles sur les nodes
# docker images   
--> image busybox  listée
kubectl run anothershell -it--image busybox sh

root@kubmaster:~# kubectl get pods

NAME						READY		STATUS		RESTARTS	AGE	
myshell-779886cfcb-rn6fz	1/1			Running		1			3m16s

root@kubmaster:~# kubectl delete pods myshell-779886cfcb-rn6fz
pod "myshell-779886cfcb-rn6fz" deleted

NB : En suppirmant le pod de cette manière, il se recrée automatiquement car les pods font partir de déploiements
et surveillés par kubernetes pour les rendre running

root@kubmaster:~# kubectl get deploy

NAME	READY UP-TO-DATE	AVAILABLE	AGE
myshell	1/1		1			1			6m26s

root@kubmaster:~# kubectl delete deploy myshell	: supprime complètement myshell

