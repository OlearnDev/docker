Terraform : Stockage des variables 

Elles sont définies à plusieurs niveaux : environnement > fichier spécifique +

- ordre des variables :

-1 environnement
-2 fichier : terraform.tfvars 
-3 fichier json terraform.tfvars.json 
-4 fichier *.auto.tfvars ou *.auto.tfvars.json 
-5 CLI : -var ou var-file 

-1 environnement: 
export TF_VAR_str="env" 
terraform apply

-2 fichier terraform.tfvars 
echo 'str="terraform" > terraform.tfvars

-5 Avec -var ou -var-file
#terraform apply -var 'str="var"'
#terraform apply -var-file monfichier.tfvars   (monfichier.tfvars fichier contenant des vars)


----------- Terraform: Remote Execution / SSH

remote_exec > local_exec remote (ssh)

# vim main.tf

variable "ssh_host" {}
variable "ssh_user" {}
variable "ssh_key" {}
resource "null_resource" "ssh_target" {
	connection {
		type = "ssh"
		user = var.ssh_user
		host = var.ssh_host
		private_key = file(var.ssh_key)			--file("/root/.ssh/id_rsa")
		}
provisioner "remote-exec" {
	inline = [
	"sudo apt update -qq >/dev/null",
	"sudo apt install -qq-y nginx >/dev/null"
	]
  }
}

EOF

# ssh-keygen -b 2048
# vim terraform.tfvars

ssh_key  = "/home/vagrant/.ssh/id_rsa" 
ssh_user = "vagrant" 
ssh_host = "192.168.21.103"   --) Machine target

EOF

# cat ~/.ssh/id_rsa.pub
	-- ) Copier le contenu dans authorized_key sur target machine
	
# sudo chown -R toto:toto .terraform
# terraform init
# terraform plan
# terraform apply

	--) Connection et installation de nginx comme indiqué dans le provisionerer

# curl 192.168.21.103   --) nginx répond

On peut vérifier nginx installé sur remote machine avec :

# service nginx status


---------------------- Autre exemple : Modifier main.tf pour copier un fichier de config de nginx
# vim main.tf

variable "ssh_host" {}
variable "ssh_user" {}
variable "ssh_key" {}
resource "null_resource" "ssh_target" {
	connection {
		type = "ssh"
		user = var.ssh_user
		host = var.ssh_host
		private_key = file(var.ssh_key)			--file("/root/.ssh/id_rsa")
		}
provisioner "remote-exec" {
	inline = [
	"sudo apt update -qq >/dev/null",
	"sudo apt install -qq-y nginx >/dev/null"
	]
  }
}


provisioner "file" {
	source = "nginx.conf"
	destination = "/tmp/default"
	}

provisioner "remote-exec" {
inline = [
	"sudo cp -a /tmp/default 1/etc/nginx/sites-available/default",
	"sudo systemctl restart nginx"
	]
}

provisioner "local-exec" {
	command = "curl ${var.ssh_host}:667"
	}
}

output "host" {
	value = var.ssh_host
}

output "user" {
	value = var.ssh_user
}

output "key" {
	value = var.ssh key
}
EOF

# terraform apply

---------------------- Autre exemple : Remote exec pour installer docker & socket 
# vim main.tf

variable "ssh host"
variable "ssh_user" {}
variable "ssh_key" {}

resource "null_resource" "ssh_target" {
	connection {
		type = "ssh"
		user = var.ssh_user
		host = var.ssh_host
		private_key = file(var.ssh_key)
	}

	provisioner "remote-exec" {
		inline = [
			"sudo apt update -qq >/dev/null",
			"curl -fsSL https://get.docker.com-o get-docker.sh",
			"sudo chmod 755 get-docker.sh" "sudo ./get-docker.sh >/dev/null"
		]

	}

	provision "file" {
		source = "startup-options.conf"
		destination = "/tmp/startup-options.conf"
	}

	provisioner "remote-exec" {
	inline = [
		"sudo mkdir -p /etc/systemd/system/docker.service.d/",
		"sudo cp /tmp/startup-options.conf /etc/systemd/system/docker.service.d/startup_options.conf",
		"sudo systemctl daemon-reload",
		"sudo systemctl restart docker", "sudo usermod -aG docker vagrant"
	]
	}
}
output "host" {
value = var.ssh_host
}
output "user" {
value = var.ssh_user
}

EOF

# vim terraform.tfvars

ssh_key  = "/home/vagrant/.ssh/id_rsa
ssh_user = "vagrant"
ssh_host = "192.168.21.103"

EOF

# terraform init
# terraform plan
# terraform apply -auto-approved  --) : Eviter de taper YES pour executer

Vérifier docker installé sur la machine distante avec "docker ps"

---- Docker provider 

Activation de la socket docker (pas recommandé côté sécurité):

cat /etc/systemd/system/docker.service.d/startup_options.conf
[Service] 
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://192.168.21.103:2375 -H unix:///var/run/docker.sock

sudo systemctl daemon-reload 
sudo systemctl restart docker

+- test

docker H 192.168.21.103:2375 ps -a

+- provider declaration

provider "docker" {
	host = "tcp://192.168.21.103:2375"
}

Rq possible by unix socket

+- upload an image

resource "docker_image" "nginx" {
	name = "nginx: latest
}

+- launch container

resource "docker_container" "nginx" {
	image = docker_image.nginx.latest
	name = "enginecks"
	ports {
		internal = 80
		external 80
	}
}

----------- Exemple 
# vim main.tf

#------ Début 1er bloc :

variable "ssh host"
variable "ssh_user" {}
variable "ssh_key" {}

resource "null_resource" "ssh_target" {
	connection {
		type = "ssh"
		user = var.ssh_user
		host = var.ssh_host
		private_key = file(var.ssh_key)
	}

	provisioner "remote-exec" {
		inline = [
			"sudo apt update -qq >/dev/null",
			"curl -fsSL https://get.docker.com-o get-docker.sh",
			"sudo chmod 755 get-docker.sh" "sudo ./get-docker.sh >/dev/null"
		]

	}

	provision "file" {
		source = "startup-options.conf"
		destination = "/tmp/startup-options.conf"
	}

	provisioner "remote-exec" {								--) Installation de la socket
	inline = [
		"sudo mkdir -p /etc/systemd/system/docker.service.d/",
		"sudo cp /tmp/startup-options.conf /etc/systemd/system/docker.service.d/startup_options.conf",
		"sudo systemctl daemon-reload",
		"sudo systemctl restart docker", "sudo usermod -aG docker vagrant"
	]
	}
}

#------ Début 2e bloc : nouveau fichier "docker.tf" éventuellement

Provider "docker" {
	host = "tcp://192.168.21.103:2375"
}

resource "docker_image" "nginx" {
name = "nginx:latest"
}

resource "docker_container" "nginx" {
	image = docker_image.nginx.latest
	name = "enginecks"
	ports {
		internal 80
		external 80
	}
}

EOF

# terraform init			-- Pour prendre en compte le nouveau docker.tf si 2e fichier créé au lieu d'un seul fichier main.tf
# terraform plan
# terraform apply -auto-approved 

# curl 192.168.21.103

----------- Terraforn: modules introduction

Terraforn : présentation des modules

+- modules: regroupement de fichiers tf avec une cohérence en matière de resources
+- module terraforn rôle ansible
+- registre : https://registry.terraform.to/
+- module = répertoire(s) fichier(s) tf

+ utilisation d'un module

	module "monmodule" {
		source"./rep_module"
	}

+ principe d'héritage du provider
	- par défaut celui du fichier dans lequel il est appelé 
	- prossibilité de préciser le provider

+ possiblité d'instancier plusieurs fois un nene module :

	module "instancel" {
		source = "./rep_module"
	}

	module "instance2" (
		source"./rep_module"
	}

+ structure of a module

|--README.md
|--main.tf
|--variables.tf
|--outputs.tf

+ more advanced

|--README.md
|--main.tf
|--variables.tf
|--outputs.tf
|--...
|--modules/
|--|--nestedA/
|--|--|--README.md
|--|--|--variables.tf
|--|--|--main.tf
|--|--|--outputs.tf
|--|--nestedB/ Eneste
|--|--...
|--examples/
|--|--exampleA/
|--|--|--main.tf
|--|--examples/

+Installation of a nodule

	terraforn get 
	terraforn init

+- can be used to manage dependency management

	terraforn apply -target=module.docker
	terraforn apply -target=module.postgres

Rq: or via variables

-------- Installation de module docker 

Rq : on est obligé de faire en 2 modules (installation et utilisation) car à l'initialisation du provider docker, terraform check l'existence 
de la socket ou api de docker lors du plan ou apply

1.Installation -----------------

$ rm -rf .terraform terraform.tfstate
$ mkdir -p modules/docker_install
$apt install tree
$ vim terraform.tfvars
ssh_host = "192.168.21.103"
ssh_user = vagrant
ssh_key  = "/home/vagrant/.ssh/id_rsa"

EOF

$ tree
|--main.tf
|--modules
|--|--docker_install
|--terraform.tfvars

$cp main.tf modules/docker_install

$vim modules/docker_install/variables.tf

ssh_host = "192.168.21.103"
ssh_user = vagrant
ssh_key  = "/home/vagrant/.ssh/id_rsa"

EOF

$vim modules/docker_install/main.tf			--) Supprimer les vars du début dans main.tf dans docker_install

resource "null_resource" "ssh_target" {
	connection {
		type = "ssh"
		user = var.ssh_user
		host = var.ssh_host
		private_key = file(var.ssh_key)
	}

	provisioner "remote-exec" {
		inline = [
			"sudo apt update -qq >/dev/null",
			"curl -fsSL https://get.docker.com-o get-docker.sh",
			"sudo chmod 755 get-docker.sh" "sudo ./get-docker.sh >/dev/null"
		]

	}

	provision "file" {
		source = "${path.module}/startup-options.conf"
		destination = "/tmp/startup-options.conf"
	}

	provisioner "remote-exec" {								--) Installation de la socket
	inline = [
		"sudo mkdir -p /etc/systemd/system/docker.service.d/",
		"sudo cp /tmp/startup-options.conf /etc/systemd/system/docker.service.d/startup_options.conf",
		"sudo systemctl daemon-reload",
		"sudo systemctl restart docker", "sudo usermod -aG docker vagrant"
	]
	}
}

Modifier le fichier main.tf à la racine de tree :

$vim main.tf

ssh_host = "192.168.21.103"
ssh_user = vagrant
ssh_key  = "/home/vagrant/.ssh/id_rsa"

nodule "docker_install" {
	source = "./modules/docker_install"
	ssh_host	= var.ssh_host				--) On repasse les vars ici pour etre accessible dans le module
	ssh_user 	= var.ssh_user					Ces vars proviennent du fichier terraform.tfvars
	ssh_key 	= var.ssh_key					Au niveau du module, on les récupère grace à variables.tf
}												Du coup main.tf au niveau du module docker_install peut les utiliser 

$ vim nodules/docker_install/startup-options.conf
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://192.168.21.103:2375 -Η unix:///var/run/docker.sock


$ terraform get 
docker_install in modules/docker_install	--) Terraform voit le nouveau module et son emplacement

$ terraform init 	--) Il recupère le provider "null_resource"

$ terraform plan

An execution plan has been generated and is shown below. 
Resource actions are indicated with the following symbols: 
	+ create

Terraforn will perform the following actions:

	#module.docker_install.null_resource.ssh_target will be created 
	+ resource "null_resource" "ssh_target { 
		+ id = (known after apply)
	}

Plan: 1 to add, o to change, 8 to destroy.

$ terraform apply -auto-approve

$ docker -H 192.168.21.103 ps   --) Socket docker répond

$ tree
|--main.tf
|--modules
|  |--docker_install
|    |--main.tf
|    |--startup-options.conf
|    |--variables.tf
|--terraform.tfstate
|--terraform.tfstate.backup
|--terraform.tfvars

