------------- PostgreSQL -----------------------

https://www.youtube.com/watch?v=Tn67kCaLElk&list=PLwxrtuGg5dNGv4jvDY3TEddn2HIn4-uF9

https://www.youtube.com/watch?v=LA17bOvN-yg&list=PLwxrtuGg5dNGv4jvDY3TEddn2HIn4-uF9&index=2

Installation Directory: C:\Program Files\PostgreSQL\17
Server Installation Directory: C:\Program Files\PostgreSQL\17
Data Directory: C:\Program Files\PostgreSQL\17\data
Database Port: 5432
Database Superuser: postgres
Operating System Account: NT AUTHORITY\NetworkService
Database Service: postgresql-x64-17
Command Line Tools Installation Directory: C:\Program Files\PostgreSQL\17
pgAdmin4 Installation Directory: C:\Program Files\PostgreSQL\17\pgAdmin 4
Stack Builder Installation Directory: C:\Program Files\PostgreSQL\17
Installation Log: C:\Users\oline\AppData\Local\Temp\install-postgresql.log

user postgres/postgres



------------- Step 1 : Installing PostgreSQL on Linux

You can see installation steps on postgresql site : https://www.postgresql.org/download/linux/redhat/

Summary below :

	yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86 64/pgdg-redhat-repo-latest.noarch.rpm
	yum install postgresql12			-- client
	yum install postgresql12-server
	/usr/pgsql-12/bin/postgresql-12-setup initdb	-- Initialize the db
	systemctl enable postgresql-12					-- Allow postgresql start when system restarts
	systemctl start postgresql-12
	systemctl status postgresql-12
	
NB : Install network tools like ifconfig using : $sudo apt install net-tools

------------- Step 2 :  USING POSTGRESQL ROLE

The installation procedure created a user account called postgres that is associated with the default Postgres role.

SWITCH to POSTGRES ACCOUNT
#sudo -u postgres

You can now access a Postgres prompt by typing below command:

$psql
postgres# \du 	: displays all roles available
postgres# \q	: to exit psql

Set password for user postgres in  'postgres' and 'template1' databases :

postgres=# ALTER USER postgres with encrypted password 'postgres';
ALTER ROLE

postgres=#\c template1
You are now connected to database "template1" as user "postgres".
template1=# ALTER USER postgres with encrypted password 'postgres';
ALTER ROLE
template1=#

------------- Step 3 : CREATING A NEW NON DEFAULT ROLE.

You have the postgres role configured within the database.
You can create new roles from the command line with the createrole command. 
The-interactive flag will prompt you for the name of the new role and also ask whether it should have superuser permissions.

If you are logged in as the postgres account. createuser-interactive :
$sudo -u postgres createuser --interactive


---------- MANAGING TABLESPACES --------------------------------

pg_default :tablespace stores all user data.
pg_global : tablespace stores all global data (dictionnaire)

---------- DEFAULT STORAGE IN POSTGTRESQL

pg_ctl -D data initdb
Is -IF data
pg_ctl -D data start

When you initialize postgre, the Postgres server creates the required files in $PGDATA directory 

The Default Tablespaces

Two tablespaces are automatically created when the database cluster is initialized.

pg_global  : tablespace is used for shared system catalogs.
pg_default : tablespace is the default tablespace for users and also for templatel and template0 databases

--- Creating a new tbs

postgres# create tablespace tbs1 location '/postgres/data/tbs1';
postgres# \db+
Is -l data/pg_tblspc/

Creating Objects :

create database dbl tablespace tbs1;
\c dbl					-- Switch to db : db1

create table tabl (a int);
create table tab2 (a int) tablespace tbs2;
create table tab3 (a int) tablespace pg_default;

---- Demo 

Initialize an instance :

$ sudo su - postgres
$ mkdir -p /postgres/data/instancel
$ pg_ctl -D /postgres/data/instancel initdb

Start the database server using :

$ pg_ctl -D /postgres/data/instancel
or 
$ pg_ctl -D /postgres/data/instancel -l logfile start

$ pg_ctl -D data initdb
Is -lF data
pg_ctl -D data start

 \db+
    Name    |  Owner   |          Location           | Access privileges | Options |  Size   | Description
------------+----------+-----------------------------+-------------------+---------+---------+-------------
 pg_default | postgres |                             |                   |         | 22 MB   |
 pg_global  | postgres |                             |                   |         | 565 kB  |
 
postgres@OlivierLP:~/16/data$ pwd
/var/lib/postgresql/16/data
postgres@OlivierLP:~/16/data$ psql
psql (16.4 (Ubuntu 16.4-0ubuntu0.24.04.2))
Type "help" for help.

postgres=# create tablespace tbs1 location '/var/lib/postgresql/16/data';
CREATE TABLESPACE

postgres=# \db+
                                            List of tablespaces
    Name    |  Owner   |          Location           | Access privileges | Options |  Size   | Description
------------+----------+-----------------------------+-------------------+---------+---------+-------------
 pg_default | postgres |                             |                   |         | 22 MB   |
 pg_global  | postgres |                             |                   |         | 565 kB  |
 tbs1       | postgres | /var/lib/postgresql/16/data |                   |         | 0 bytes |
(3 rows)

postgres=# exit
postgres@OlivierLP:~/16/data$ ls -ltrh
total 4.0K
drwx------ 2 postgres postgres 4.0K Nov  8 22:33 PG_16_202307071
postgres@OlivierLP:~/16/data$

***** pg_tblspc : folder in $PGDATA where you have symbolic links to tablespaces folders associated with tablespaces 

postgres@OlivierLP:~/16/main$ ls
PG_VERSION  pg_commit_ts  pg_multixact  pg_serial     pg_stat_tmp  pg_twophase  postgresql.auto.conf
base        pg_dynshmem   pg_notify     pg_snapshots  pg_subtrans  pg_wal       postmaster.opts
global      pg_logical    pg_replslot   pg_stat       pg_tblspc    pg_xact      postmaster.pid
postgres@OlivierLP:~/16/main$ cd pg_tblspc
postgres@OlivierLP:~/16/main/pg_tblspc$
postgres@OlivierLP:~/16/main/pg_tblspc$ ls -ltrh
total 0
lrwxrwxrwx 1 postgres postgres 27 Nov  8 22:33 16390 -> /var/lib/postgresql/16/data

NB : l''id pour le nouveau tbs est : 16390

***** Create database with default tbs :

postgres=# create database db1 tablespace tbs1;
postgres=# \l
                                                   List of databases
   Name    |  Owner   | Encoding | Locale Provider | Collate |  Ctype  | ICU Locale | ICU Rules |   Access privileges
-----------+----------+----------+-----------------+---------+---------+------------+-----------+-----------------------
 db1       | postgres | UTF8     | libc            | C.UTF-8 | C.UTF-8 |            |           |
 postgres  | postgres | UTF8     | libc            | C.UTF-8 | C.UTF-8 |            |           |
 template0 | postgres | UTF8     | libc            | C.UTF-8 | C.UTF-8 |            |           | =c/postgres          +
           |          |          |                 |         |         |            |           | postgres=CTc/postgres
 template1 | postgres | UTF8     | libc            | C.UTF-8 | C.UTF-8 |            |           | =c/postgres          +
           |          |          |                 |         |         |            |           | postgres=CTc/postgres
(4 rows)

postgres@OlivierLP:~/16/main/pg_tblspc$ mkdir -p /var/lib/postgresql/16/data/tbs2
postgres=# create tablespace tbs2 location '/var/lib/postgresql/16/data/tbs2';
CREATE TABLESPACE


postgres=#

***** switch to db1 and create tables 

postgres=# \c db1
You are now connected to database "db1" as user "postgres".

db1=# create table tabl (a int);
CREATE TABLE
db1=#

postgres=# \db+
                                              List of tablespaces
    Name    |  Owner   |             Location             | Access privileges | Options |  Size   | Description
------------+----------+----------------------------------+-------------------+---------+---------+-------------
 pg_default | postgres |                                  |                   |         | 22 MB   |
 pg_global  | postgres |                                  |                   |         | 565 kB  |
 tbs1       | postgres | /var/lib/postgresql/16/data      |                   |         | 7568 kB |
 tbs2       | postgres | /var/lib/postgresql/16/data/tbs2 |                   |         | 0 bytes |
(4 rows)

postgres=# create table tab2 (a int) tablespace tbs2;
CREATE TABLE
postgres=# create table tab3 (a int) tablespace pg_default;
CREATE TABLE
postgres=# \db+
                                                List of tablespaces
    Name    |  Owner   |             Location             | Access privileges | Options |    Size    | Description
------------+----------+----------------------------------+-------------------+---------+------------+-------------
 pg_default | postgres |                                  |                   |         | 22 MB      |
 pg_global  | postgres |                                  |                   |         | 565 kB     |
 tbs1       | postgres | /var/lib/postgresql/16/data      |                   |         | 7568 kB    |
 tbs2       | postgres | /var/lib/postgresql/16/data/tbs2 |                   |         | 4096 bytes |
(4 rows)

postgres=#

***** ******** How to move objects from one tablespace to another

NB: There will be a lock on the table while moving to another tbs

alter table tabl set tablespace pg_default;
alter table all in tablespace tbs1 set tablespace pg_default;

*********** Tablespace Properties

alter tablespace space2 set (seq_page_cost=0.5, random_page_cost=0.5);   -- No tested : Need to check further

*********** Set default tablespace for users

postgres=# SET default_tablespace = tbs2;
SET
postgres=# show default_tablespace ;
 default_tablespace
--------------------
 tbs2
(1 row)

postgres=# create table foo (i int);
CREATE TABLE
postgres=# select * from pg_tables where tablename='foo';
 schemaname | tablename | tableowner | tablespace | hasindexes | hasrules | hastriggers | rowsecurity
------------+-----------+------------+------------+------------+----------+-------------+-------------
 public     | foo       | postgres   | tbs2       | f          | f        | f           | f
(1 row)

postgres=# select relname,reltablespace from pg_class where reltablespace in(select
oid from pg_tablespace where spcname not in ('pg_default','pg_global'));
 relname | reltablespace
---------+---------------
 tab2    |         16397
 foo     |         16397
 tab1    |         16390
(3 rows)

postgres=# select * from pg_tablespace;
  oid  |  spcname   | spcowner | spcacl | spcoptions
-------+------------+----------+--------+------------
  1663 | pg_default |       10 |        |
  1664 | pg_global  |       10 |        |
 16390 | tbs1       |       10 |        |
 16397 | tbs2       |       10 |        |
(4 rows)

postgres=# select  relname,reltablespace from pg_class where relname like 'tab%';
      relname      | reltablespace
-------------------+---------------
 tab1              |         16390
 tab2              |         16397
 tab3              |             0
 table_constraints |             0
 table_privileges  |             0
 tables            |             0
(6 rows)

***********  How to Backup additional tablespace

pg_basebackup --format=p --tablespace-mapping=/tmp/space2=/tmp/space2backup -D plainb

*********** Why is tablespace is used for

- Database growing then create a new tablespace and move objects from existing to new tablespace. 
- High perfomrming disk move indexes and table to that

------------- How to change data directory

***********  STEP 1 - Checkout existing data folder

postgres=# show data_directory;
       data_directory
-----------------------------
 /var/lib/postgresql/16/main
(1 row)

postgres=#

New datadir location: /postgres/data

***********  STEP 2 - SHUTDOWN POSTGRES SERVICE.
Depending on postgresql installed :

sudo systemctl status postgresql-12    
sudo systemctl stop postgresql-12 
sudo systemctl status postgresql-12

or 

If postgre user already in sudoers, no need to add sudo at the beginning :

$ service postgresql status
$ service postgresql stop
$ service postgresql status

***********  STEP 3 Copy/move data from current data directory to new location.

#chown postgres: postgres /postgres/data 
$chmod -R 750/postgres/data

cd /var/lib/pgsql/12/data/ 
cp -r*/postgres/data cd /postgres/data
ls -lrt

***********  Step 4 Update New Data dir Location in config file. ***

cp/var/lib/pgsql/12/data/postgresql.conf /var/lib/pgsql/12/data/postgresql.conf_orig

sudo vi /var/lib/pgsql/12/data/postgresql.conf

data_directory = '/postgres/data/'

***********  Step 5 Restarting Postgres ***********  

sudo systemctl start postgresql-12
sudo systemctl status postgresql-12

or 

$ service postgresql stop
$ service postgresql status

tail -10f /var/log/messages

***********  Step 6 Verify new location ***

sudo u postgres psql 
SHOW data_directory;

postgres=# SHOW data_directory; 
data_directory
/postgres/data (1 row)

----------------- Introduction to PostgreSQL log_statement

Its' related with error and reporting to error alongwith warning and database queries in a logfile.

Default log statement option in PostgreSQL configuration file is none which means nothing will be logged in into the error file.

Options

NONE
DDL
MOD
ALL

How does How log_statement work in PostgreSQL?

It's a useful parameter in PostgreSQL used for log error in logfile, database warning message and SQL queries.

Log_statement have four options available in PostgreSQL as mentioned below.

None:

This option of log_statement is defined as doesn''t log any query in error log file. This is default configurations option of log_statement 
is available. This is also defined as turning off the log_statement parameter for postgresql.

DDL:

Log all query which are under category of the DDL statement. E.g create, alter and drop statement.

A11:

This option is defined as log all the statement which was executed from user.

It is logging DDL, DML and all the query language in PostgreSQL.

Mod:

Not advised

This option in log_statement is defined as log DDL query as well as log the modifying statement like delete, update, truncate, insert, copy, 
execute and prepar

postgres=# show config_file;
               config_file
-----------------------------------------
 /etc/postgresql/16/main/postgresql.conf
(1 row)

postgres@OlivierLP:~$ cp /etc/postgresql/16/main/postgresql.conf /etc/postgresql/16/main/postgresql.conf.bak
postgres@OlivierLP:~$ vi /etc/postgresql/16/main/postgresql.conf

postgres=# show log_statement;
 log_statement
---------------
 none
(1 row)

postgres=# alter system set log_statement='DDL';
ALTER SYSTEM
postgres=#

$ sudo service postgresql stop
$ sudo service postgresql start
$ sudo service postgresql status

$psql
postgres=# show log_statement;
 log_statement
---------------
 ddl
(1 row)

In ubuntu, destination log file is in : /var/log/postgresql  (alert log file)

$ cd /var/log/postgresql
$ tail -10f postgresql-16-main.log

db1=# CREATE TABLE course ( course_no integer,name text,price numeric);
CREATE TABLE
db1=# INSERT INTO course (course_no, name, price) VALUES (1, 'postgres', 150), (2, 'mysql', 160), (3, 'mongodb', 170);
INSERT 0 3
db1=# show log_destination ;
 log_destination
-----------------
 stderr
(1 row)

db1=# SELECT  pg_current_logfile();
 pg_current_logfile
--------------------

(1 row)

db1=# SHOW log_directory;
 log_directory
---------------
 log
(1 row)

db1=# select * from course;
 course_no |   name   | price
-----------+----------+-------
         1 | postgres |   150
         2 | mysql    |   160
         3 | mongodb  |   170
(3 rows)

db1=#

db1=# alter system set log_statement = 'ALL';
ALTER SYSTEM
db1=# show log_statement;
 log_statement
---------------
 ddl
(1 row)

--- Need to bounce the system to see change applied and all statements will be captured in log file

# delete * from course;

---------- How to enable remote access to PostgreSQL server


*********  Overview

When you install PostgreSQL, by default connection to the Postgres by using TCP/IP is not allowed.

When you try to connect Postgres database from a client using psql command, 
you get "psql: could not connect to server: Connection refused" error message.

****** Demo setup

IP address 		hostname 	postgres Vesrion	Role

192.168.1.61	linux2		12					Server
192.168.1.71	linux1		12					Client


# psql -U postgres h 192.168.1.61

1. Modify pg_hba.conf to add Client Authentication Record in IPv4 section :

host 	all		all 	192.168.1.71/24 (client ip) 	md5


2. Change the Listen Address in postgresql.conf

On the PostgreSQL database server, by default, the listen address will be localhost 
in the postgresql.conf file as shown below.

# grep listen /var/lib/pgsql/12/data/postgresql.conf
listen_addresses = 'localhost'

Modify this line and give IP address of server. If you have multiple interfaces on the server, 
you can also specify a specific interface to be listened.

Verify updated details.

-bash-4.2$ grep listen /var/lib/pgsql/12/data/postgresql.conf
listen_addresses = '192.168.1.61' # what IP address(es) to listen on; (server ip)


------ Demo

Find localtion of config file : location can be different depending on posygresql installed

postgres=# show data_directory;
       data_directory
-----------------------------
 /var/lib/postgresql/16/main
(1 row)

postgres=# SHOW hba_file;
              hba_file
-------------------------------------
 /etc/postgresql/16/main/pg_hba.conf
(1 row)

postgres@OlivierLP:~$ ls -ltrh /etc/postgresql/16/main/
total 100K
-rw-r--r-- 1 postgres postgres  317 Nov  8 21:04 start.conf
-rw-r--r-- 1 postgres postgres  143 Nov  8 21:04 pg_ctl.conf
-rw-r----- 1 postgres postgres 2.6K Nov  8 21:04 pg_ident.conf
-rw-r--r-- 1 postgres postgres  315 Nov  8 21:04 environment
drwxr-xr-x 2 postgres postgres 4.0K Nov  8 21:04 conf.d
-rw-r--r-- 1 postgres postgres  30K Nov  9 23:28 postgresql.conf.bak
-rw-r--r-- 1 postgres postgres  30K Nov  9 23:29 postgresql.conf
-rw-r----- 1 postgres postgres 5.8K Nov 10 21:32 pg_hba.conf.bak
-rw-r----- 1 postgres postgres 5.9K Nov 10 21:33 pg_hba.conf
postgres@OlivierLP:~$

$ ls -ltrh /etc/postgresql/16/main/pg_hba.conf
-rw-r----- 1 postgres postgres 5.8K Nov  8 21:04 /etc/postgresql/16/main/pg_hba.conf

postgres@OlivierLP:~$ cat /etc/postgresql/16/main/pg_hba.conf

# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            scram-sha-256
host    all             all             10.0.0.64/32            md5					#   Added line for client
# IPv6 local connections:
host    all             all             ::1/128                 scram-sha-256
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            scram-sha-256
host    replication     all             ::1/128                 scram-sha-256

EOF

Modify postgresql.conf file to sepcify ip of the local server 127.0.1.1 :
 grep listen_addresses postgresql.conf
listen_addresses = '127.0.1.1'          # what IP address(es) to listen on;

Bounce postgresql service 

	service postgresql restart
	service postgresql status

---------- Débogage souci de connexion en remote à bd postgresql en remote ---------------

S'assurer d'utiliser les bons fichiers pg_hba.conf et postgresql.conf dans le bon  rep (utiliser "SHOW hba_file;" pour voir le rép)
Modifier les valeurs appropriées :
	+ listen_addresses pour postgresql.conf. Si listen_addresses = 'localhost', les remotes connexions ne sont pas acceptées. Mettre l''ip pour allow remote connexions
	+ Ligne pour IPv4 dans pg_hba.conf
	+ Restart du service postgresql dans windows ou 'service postgresql restart' dans linux 
Installer si nécessaire 'ifconfig' avec 'sudo apt install net-tools' pour voir l''ip de la machine remote avec ifconfig
Set le passwd du compte postgres pour faire les tests de connexion de la bd 'postgres' par défaut si besoin

-------------------------- Password file 

The file .pgpass aka password file in a user''s home directory can contain passwords to be used if the connection requires a password.

$ psql -U postgres

Prompts for password

When password saved in ~/.pgpass for the mentioned user then it does not prompt for password

$ psql -U postgres

Does not prompt for password due to password file being used. 

In Windows the file is : %APPDATA%\postgresql\pgpass.conf

Permission on the file :
	In Linux 0600 pgpass 
	In windows user must have full permission

# format is a below with 5 entries in a line.
	#hostname:port:database:username:password
	Localhost:5432:postgres:postgres:password
	
	$ chmod 0600 .pgpass


------------------- Postgres server configuration file.

Location on new version is in data directory $datadir/postgres.conf
Older version location: /etc/postgresql/9.5/main/postgresql.conf

Select name, setting from pg_settings;					--> Show parameters and values
Select distinct context from pg_settings;				--> Shows which Parameters requires system restart (context=postmaster)

postgres=# show config_file;
config_file
/var/lib/pgsql/12/data/postgresql.conf

postgres=# show port;

port
5432

postgres=# Show max_connections;

max_connections
100

postgres=# alter system set max_connections =200;
ALTER SYSTEM

postgres=# Show max_connections;
max_connections
100

We need to restart instance to see new values applied. Meanwhile, value to be applied is saved in file : postgresql.auto.conf


------------------  pg_hba.conf  ----------------------------------------

postgres host based authentication is a file located in data directory and is responsible for

1. Which hosts are allowed to connect through role.
2. How clients are authenticated.
3. which PostgreSQL user names they can use.
4. which databases they can access

**** what is the usage of pg_hba.cnf file.

	It enables client authentication between the PostgreSQL server and the client application.

	This file consists of a series of entries which define a host and its associated permissions
	(e.g., the database it is allowed to connect to, the authentication method to use, and so on).


postgres=# create role user2_remote with login password 'password';
CREATE ROLE

postgres=# \du

--------------------- Schemas

Schemas allow you to organize database objects.

Schemas enable multiple users to use one database.

It's easier to back-up data that's in a separate schema.

It's easier to restore data that's in a separate schema.

Users can be restricted in their work to single schemas.

keeping your application data separate in schemas improves management

**** Public schema :

	PostgreSQL creates a schema named public for every new database.

	PostgreSQL automatically put it in public schema.

	CREATE TABLE table_name(...);
	and
	CREATE TABLE public.table_name(...);

**** BUILDING BLOCKS

Postgresql cluster  (or instance) > databases > Schema > Objects

# SHOW search_path;    --> Path de recherche d'un objet entre plusieurs schémas

search_path
"$user", public (1 row)

Schema with the same name as the current user is to be searched.

To put our new schema in the path, we use: postgres# \c dvdrental;

postgres# show search_path;

postgres# SET search_path TO schema1, public;

Note: Then we no longer have access to the public schema without explicit qualification. 
There is nothing special about the public schema except that it exists by default

By default, users cannot access any objects in schemas they do not own.

by default, everyone has CREATE and USAGE privileges on the schema public. This allows all users that are able to connect to a given 
database to create objects in its public.

Usage Patterns

1) issue REVOKE CREATE ON SCHEMA public FROM PUBLIC. create a schema for each user with the same name as that user. 
2) Remove the public schema from the default search path by issuing ALTER ROLE ALL SET search_path = "$user".
3) Keep the default.

Conclusion: you should not use the public schema.

--------------- POSTGRESQL CLUSTER

A collection of databases managed by a single PostgreSQL server instance constitutes a database cluster.

Components of cluster :

	* Data directory
		• Files (databases, tables and all other logical entities) created and managed by Postgres tools and processes

	* Postgres Process
		• manages the files of data directory and provides interfaces to manipulate the contents.

**** How to create new directory for a cluster 

sudo su postgres

echo $PGDATA

Creating a cluster data directory to a new location/postgres/data/versionl

Note: postgres is superuser

	mkdir -p/postgres/data/versionl initdb/postgres/data/version1
	CONFIGURING Postgres CLUSTER

Modify below items:

	#port=5432 to 5433
	#unix_socket_directories = '/var/run/postgresql' to /home/versionl

STARTING Postgres SERVER

	postgres -D/postgres/data/version]
	pg_ctl -D/postgres/data/version1 -I logfile start

Checking the new process on OS

	ps xf							------> Gives a tree of background processes

Connecting to new cluster

	• psql -h localhost -p 5433 postgres

Stop the server for a cluster

	• pg_ctl -D /postgres/data/version1 -l /postgres/data/logfile stop

Reload the cluster

• pg_ctl -D /postgres/data/version1 -l /postgres/data/logfile.log reload




